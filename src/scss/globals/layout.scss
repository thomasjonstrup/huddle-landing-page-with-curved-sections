@use "../util/" as *;
@use "fonts";
@use "colors";

// Reset

*,
*:before,
*:after {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}

html {
	font-size: 62.5%; // 1rem = 10px
}

body {
	font-family: fonts.$font-family;
	background: white;
	color: colors.$very-dark-cyan;
	font-size: 1.5rem;
}

.container {
	padding: 0 3rem;
	max-width: 1200px;
	margin: 0 auto;
}

.grid {
	display: grid;
	-ms-grid-columns: 100%;
	grid-template-columns: 100%;

	@include breakpoint(medium) {
		display: grid;
		grid-template-columns: 250px 1fr;
	}

	gap: 2rem;
}

.attribution {
	margin-top: 4rem;
	font-size: 1.1rem;
	text-align: center;
	color: white;

	a {
		color: colors.$pink;
	}
}

/* .mt-2 {
	margin-top: 2rem;
}

.mt-10 {
	margin-top: 10rem;
} */

.times {
	display: grid;
	grid-template-columns: repeat(1, 1fr);
	gap: 2rem;

	@include breakpoint(large) {
		grid-template-columns: repeat(4, 1fr);
	}

	@include breakpoint(medium) {
		grid-template-columns: repeat(3, 1fr);
	}
}

// margin and padding values array
$space-values: (0, 2, 3, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50) !default;

// margin and padding shorthands
$space-prefixes: (
	p: padding,
	pt: padding-top,
	pr: padding-right,
	pb: padding-bottom,
	pl: padding-left,
	m: margin,
	mt: margin-top,
	mr: margin-right,
	mb: margin-bottom,
	ml: margin-left,
) !default;

@mixin make-spaces() {
	@each $attr-short, $attr-long in $space-prefixes {
		@each $value in $space-values {
			.#{$attr-short}-#{$value} {
				#{$attr-long}: #{$value}#{"rem !important"};
			}
		}
	}
}

@include make-spaces();

.row {
	/* 	display: flex; */
	text-align: center;
	/* 	flex-direction: column; */
}

.icon {
	color: white;
	width: 2rem;
	font-size: 2rem;
}
